//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceAppTests.MyServiceClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyServiceClient.IMyService")]
    public interface IMyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetAllProducts", ReplyAction="http://tempuri.org/IMyService/GetAllProductsResponse")]
        WcfServiceApp.Product[] GetAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetAllProducts", ReplyAction="http://tempuri.org/IMyService/GetAllProductsResponse")]
        System.Threading.Tasks.Task<WcfServiceApp.Product[]> GetAllProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/AddProduct", ReplyAction="http://tempuri.org/IMyService/AddProductResponse")]
        int AddProduct(string Name, string ur, System.DateTime introdate, decimal price, int prodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/AddProduct", ReplyAction="http://tempuri.org/IMyService/AddProductResponse")]
        System.Threading.Tasks.Task<int> AddProductAsync(string Name, string ur, System.DateTime introdate, decimal price, int prodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetAllProductsById", ReplyAction="http://tempuri.org/IMyService/GetAllProductsByIdResponse")]
        WcfServiceApp.Product GetAllProductsById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetAllProductsById", ReplyAction="http://tempuri.org/IMyService/GetAllProductsByIdResponse")]
        System.Threading.Tasks.Task<WcfServiceApp.Product> GetAllProductsByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/UpdateProduct", ReplyAction="http://tempuri.org/IMyService/UpdateProductResponse")]
        int UpdateProduct(string Name, string ur, System.DateTime introdate, decimal price, int prodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/UpdateProduct", ReplyAction="http://tempuri.org/IMyService/UpdateProductResponse")]
        System.Threading.Tasks.Task<int> UpdateProductAsync(string Name, string ur, System.DateTime introdate, decimal price, int prodId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/DeleteProductById", ReplyAction="http://tempuri.org/IMyService/DeleteProductByIdResponse")]
        int DeleteProductById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/DeleteProductById", ReplyAction="http://tempuri.org/IMyService/DeleteProductByIdResponse")]
        System.Threading.Tasks.Task<int> DeleteProductByIdAsync(int Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyServiceChannel : WcfServiceAppTests.MyServiceClient.IMyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyServiceClient : System.ServiceModel.ClientBase<WcfServiceAppTests.MyServiceClient.IMyService>, WcfServiceAppTests.MyServiceClient.IMyService {
        
        public MyServiceClient() {
        }
        
        public MyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WcfServiceApp.Product[] GetAllProducts() {
            return base.Channel.GetAllProducts();
        }
        
        public System.Threading.Tasks.Task<WcfServiceApp.Product[]> GetAllProductsAsync() {
            return base.Channel.GetAllProductsAsync();
        }
        
        public int AddProduct(string Name, string ur, System.DateTime introdate, decimal price, int prodId) {
            return base.Channel.AddProduct(Name, ur, introdate, price, prodId);
        }
        
        public System.Threading.Tasks.Task<int> AddProductAsync(string Name, string ur, System.DateTime introdate, decimal price, int prodId) {
            return base.Channel.AddProductAsync(Name, ur, introdate, price, prodId);
        }
        
        public WcfServiceApp.Product GetAllProductsById(int id) {
            return base.Channel.GetAllProductsById(id);
        }
        
        public System.Threading.Tasks.Task<WcfServiceApp.Product> GetAllProductsByIdAsync(int id) {
            return base.Channel.GetAllProductsByIdAsync(id);
        }
        
        public int UpdateProduct(string Name, string ur, System.DateTime introdate, decimal price, int prodId) {
            return base.Channel.UpdateProduct(Name, ur, introdate, price, prodId);
        }
        
        public System.Threading.Tasks.Task<int> UpdateProductAsync(string Name, string ur, System.DateTime introdate, decimal price, int prodId) {
            return base.Channel.UpdateProductAsync(Name, ur, introdate, price, prodId);
        }
        
        public int DeleteProductById(int Id) {
            return base.Channel.DeleteProductById(Id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteProductByIdAsync(int Id) {
            return base.Channel.DeleteProductByIdAsync(Id);
        }
    }
}
