//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceApp
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProductDBEntities : DbContext
    {
        public ProductDBEntities()
            : base("name=ProductDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ErrorInfoDetail> ErrorInfoDetails { get; set; }
        public virtual DbSet<TblParentTask> TblParentTasks { get; set; }
        public virtual DbSet<TblProject> TblProjects { get; set; }
        public virtual DbSet<TblTask> TblTasks { get; set; }
        public virtual DbSet<TblUser> TblUsers { get; set; }
    
        public virtual int sp_InsertProduct(string productName, string url, Nullable<decimal> price, Nullable<System.DateTime> introductionDate, Nullable<int> userId)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var introductionDateParameter = introductionDate.HasValue ?
                new ObjectParameter("IntroductionDate", introductionDate) :
                new ObjectParameter("IntroductionDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertProduct", productNameParameter, urlParameter, priceParameter, introductionDateParameter, userIdParameter);
        }
    
        public virtual int sp_DeleteProduct(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteProduct", productIdParameter);
        }
    
        public virtual int sp_UpdateProduct(Nullable<int> productId, string productName, string url, Nullable<decimal> price, Nullable<System.DateTime> introductionDate, Nullable<int> userId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var introductionDateParameter = introductionDate.HasValue ?
                new ObjectParameter("IntroductionDate", introductionDate) :
                new ObjectParameter("IntroductionDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateProduct", productIdParameter, productNameParameter, urlParameter, priceParameter, introductionDateParameter, userIdParameter);
        }
    
        public virtual int sp_InsertErrorInfoDetail(string errorInfoMessage, string errorInfoType)
        {
            var errorInfoMessageParameter = errorInfoMessage != null ?
                new ObjectParameter("ErrorInfoMessage", errorInfoMessage) :
                new ObjectParameter("ErrorInfoMessage", typeof(string));
    
            var errorInfoTypeParameter = errorInfoType != null ?
                new ObjectParameter("ErrorInfoType", errorInfoType) :
                new ObjectParameter("ErrorInfoType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertErrorInfoDetail", errorInfoMessageParameter, errorInfoTypeParameter);
        }
    
        public virtual ObjectResult<sp_GetProduct_Result> sp_GetProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProduct_Result>("sp_GetProduct");
        }
    
        public virtual int sp_GetAllProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAllProducts");
        }
    
        public virtual ObjectResult<sp_GetProduct_Result> sp_AllGetProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProduct_Result>("sp_AllGetProducts");
        }
    
        public virtual int sp_DeleteUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteUser", userIdParameter);
        }
    
        public virtual int sp_InsertUser(string userName, string password, Nullable<bool> isActive)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUser", userNameParameter, passwordParameter, isActiveParameter);
        }
    
        public virtual int sp_UpdateUser(string userName, string password, Nullable<int> userId, Nullable<bool> isActive)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUser", userNameParameter, passwordParameter, userIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_CheckifUserUsed(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_CheckifUserUsed", userIdParameter);
        }
    
        public virtual ObjectResult<sp_GetUsers_Result> sp_GetUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUsers_Result>("sp_GetUsers");
        }
    
        public virtual int sp_DeleteUserInfo(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteUserInfo", userIdParameter);
        }
    
        public virtual int sp_InsertUserInfo(string firstName, string lastName, string employeeID, Nullable<int> project_ID, Nullable<int> task_ID)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var project_IDParameter = project_ID.HasValue ?
                new ObjectParameter("Project_ID", project_ID) :
                new ObjectParameter("Project_ID", typeof(int));
    
            var task_IDParameter = task_ID.HasValue ?
                new ObjectParameter("Task_ID", task_ID) :
                new ObjectParameter("Task_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUserInfo", firstNameParameter, lastNameParameter, employeeIDParameter, project_IDParameter, task_IDParameter);
        }
    
        public virtual int sp_UpdateUserInfo(string firstName, string lastName, string employeeID, Nullable<int> project_ID, Nullable<int> task_ID, Nullable<int> userId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var project_IDParameter = project_ID.HasValue ?
                new ObjectParameter("Project_ID", project_ID) :
                new ObjectParameter("Project_ID", typeof(int));
    
            var task_IDParameter = task_ID.HasValue ?
                new ObjectParameter("Task_ID", task_ID) :
                new ObjectParameter("Task_ID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUserInfo", firstNameParameter, lastNameParameter, employeeIDParameter, project_IDParameter, task_IDParameter, userIdParameter);
        }
    
        public virtual int sp_DeleteProjectInfo(Nullable<int> project_ID)
        {
            var project_IDParameter = project_ID.HasValue ?
                new ObjectParameter("Project_ID", project_ID) :
                new ObjectParameter("Project_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteProjectInfo", project_IDParameter);
        }
    
        public virtual int sp_InsertProjectInfo(string project, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> priority)
        {
            var projectParameter = project != null ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertProjectInfo", projectParameter, startDateParameter, endDateParameter, priorityParameter);
        }
    
        public virtual int sp_UpdateProjectInfo(Nullable<int> project_ID, string project, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> priority)
        {
            var project_IDParameter = project_ID.HasValue ?
                new ObjectParameter("Project_ID", project_ID) :
                new ObjectParameter("Project_ID", typeof(int));
    
            var projectParameter = project != null ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateProjectInfo", project_IDParameter, projectParameter, startDateParameter, endDateParameter, priorityParameter);
        }
    }
}
